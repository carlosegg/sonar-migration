<%
assignee_check_script = "if ($('autocompleteText-assignee_login').value != '' && $('assignee_login').value == '') { alert($('autocompleteText-assignee_login').value + '" + message('reviews.user_does_not_exist') + "'); return false;}"
%>
<form method="post"
onsubmit="<%= assignee_check_script -%> new Ajax.Updater('vId<%= params[:id] -%>', '<%= url_for :action => 'violation_assign' -%>', {asynchronous:true, evalScripts:true, parameters:Form.serialize(this)}); return false;">
<%= hidden_field_tag :id, params[:id] -%>
<table class="width100">
<tr>
<td style="vertical-align:top">
<textarea id="commentText<%= params[:id] -%>" rows="4" name="text" style="width: 100%"></textarea>
</td>
<td class="sep"></td>
<td style="vertical-align:top;width: 90px">
<%= render :partial => 'markdown/tips' -%>
</td>
</tr>
</table>
<%= user_autocomplete_field "assignee_login", "" -%>
&nbsp;&nbsp;
<%= submit_to_remote "submit_btn", message('reviews.assign_submit'),
:url => {:action => 'violation_assign'},
:update => "vId" + params[:id],
:before => assignee_check_script -%>
&nbsp;
<%= image_tag 'sep12.png' -%>
&nbsp;
<%= submit_to_remote "submit_me_btn", message('reviews.assign_to_me_submit'),
:url => {:action => 'violation_assign', :id => params[:id], :me => true},
:update => "vId" + params[:id],
:html => {:disabled => (@violation.review && @violation.review.assignee_id==current_user.id)} -%>
&nbsp;
<%= link_to_function message('cancel'), "cancelViolationAction(#{params[:id]})" -%>
<script>
$('autocompleteText-assignee_login').focus()
</script>
</form>
